/**
	@file Файл list_lib.h
	@brief В файле определены структуры списка, макросы и объявления функции.
*/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

//! Количество символов в параметре "name" объекта.
#define NUM_SYMBOL_NAME 	 16
//! Количество символов в имени файлов.
#define NUM_SYMBOL_NAME_FILE 50

//! Символ, необходимый для выхода из функции выполнения команды.
#define EXIT_COMMAND    	 -1
//! Ошибка открытия файла.
#define ERROR 				 -2

//! Истина.
#define TRUE				 1
//! Ложь.
#define FALSE				 0

//! Приветствие при загрузке программы.
char Hello_text[] = "Hello my cat list! ";
//! Массив имени файла для чтения.
char File_read_name[] = "";
//! Массив имени файла для записи.
char File_write_name[] = "";

/**
	@brief Список возможных комманд.
*/
typedef enum
{
	//! Новая команда отсуствует.
	FREE		= 0,
	//! Добавление нового объекта в список.
	ADD 		= 1,
	//! Удаление одного объекта списка.
	DEL 		= 2,
	//! Вывод всех объектов на экран.
	SHOW_ALL    = 3,
	//! Вывод одного объекта на экран.
	SHOW_ONE    = 4,
	//! Сортировка списка.
	SORT_LIST   = 5,
	//! Фильтрация списка.
	FILT_LIST   = 6,
	//! Добавление объектов из файла.
	READ_FILE   = 7,
	//! Запись объектов списка в файл.
	WRITE_FILE  = 8,
	//! Удаление всех объектов.
	DEL_ALL     = 9,
	//! Вывод на экран списка возможных команд.
	HELP 		= 10,
	//! Выход из программы.
	EXIT 		= 11
}COMAND;

/**
	@brief Параметр объекта.
	
		Используется для определения признака фильтрации и сортировки, задаваемого пользователем.
*/
typedef enum
{
	//! Вес.
	WEIGHT 	= 1,
	//! Имя.
	NAME 	= 2	
}FLAG;

/**
	@brief Структура записи объекта.
 */
typedef struct Object Object_t;
struct Object
{
	//! Вес объекта.
	float weight;
	//! Имя объекта.
	char  name[NUM_SYMBOL_NAME];	
};


/**
	@brief Структура элемента списка.
*/
typedef struct Node Node_t;
struct Node
{
	//! Указатель на объект.
	void	  *object; 	   	
	//! Указатель на следующий элемент списка.
	Node_t    *next_node; 		
};


/**
	@brief Структура списка.
*/
typedef struct List List_t;
struct List
{
	//! Указатель на первый элемент списка.
	Node_t *top_node;  		
	//! Количество элементов в списке.	
	int count; 					
};



/**
	@brief Функция, вызываемая при выходе из программы.
*/
void end_prog();

/**
	@brief Функция создания списка.
	@return Функция возвращает указатель на список.
*/
List_t* create_list();

/**
	@brief Функция, вызываемая при выходе из программы.
	@param list указатель на список.
	@param num_node номер объекта.
	@return Функция возвращает указатель на искомый объект.
*/
Node_t *get_node(List_t *list, int num_node);

/**
	@brief Функция добавления объекта в конец списка.
	@param list указатель на список.
	@param weight параметр объекта (вес).
	@param name параметр объекта (имя).
*/
void push_back(List_t *list, float weight, char* name);

/**
	@brief Функция вывода на экран одного объекта по номеру.
	@param list указатель на список.
	@param num_node номер объекта.
*/
void print_node(List_t *list, int num_node);

/**
	@brief Функция удаления одного объекта по номеру.
	@param list указатель на список.
	@param num_node номер объекта.
*/
void delete_node(List_t *list, int num_node);

/**
	@brief Функция вывода на экран всех объектов в списке.
	@param list указатель на список.
*/
void print_list(List_t *list);

/**
	@brief Функция сортировки списка.
	
		Осуществляется сортировка существующего списка. После сортировки, все элементы выводятся на экран.
		Для параметра "вес" сортировка осуществляется по возрастанию. Для параметра "имя" сортировка осуществляется по алфавиту.
		
	@param list указатель на список.
	@param flg флаг, параметр объекта для сортировки.
	@warning При сортировке по парметру "имя" не учитывается регистр.
*/
void sort_list(List_t *list, FLAG flg);

/**
	@brief Функция фильтрации списка.
	
		Фильтрация осуществляется по признаку: больше или равен параметру фильтрации. Если параметр объекта в списке соотвествует признаку, он выводится на экран.
		
	@param list указатель на список.
	@param flg флаг, параметр объекта для фильтрации.
	@param number параметр фильтрации.
	@return Функция возвращает FALSE, если в списке нет объектов, удовлетворяющих признаку фильтрации.
*/
int filt_list(List_t *list, FLAG flg, float number);

/**
	@brief Функция добавления объектов из файла.
	
		Файл в формате .txt должен содержать объекты в виде: "имя" "вес" (без кавычек). Файл должен находится в директории программы. 
		
	@param list указатель на список.
	@return Функция возвращает ERROR, если файл не был найден. Количество добавленных в список элементов в случае успешного создания файла.
*/
int read_file(List_t *list);

/**
	@brief Функция записи объектов в файл.
	
		Созданный файл в формате .txt содержат объекты в виде: "имя" "вес" (без кавычек). Созданный файл находится в директории программы. 
		
	@param list указатель на список.
	@return Функция возвращает ERROR, если файл не был создан. Количество записанных элементов, в случае успешного создания файла.
*/
int write_file(List_t *list);

/**
	@brief Функция удаления всех объектов.
	@param list указатель на список.
	@return Функция возвращает количество удаленных объектов.
*/
int delete_all(List_t *list);

/**
	@brief Основная функция выполнения программы.
	
		Данная функция представляет собой бесконечный цикл, где производится чтение команд от пользователя из командной строки.
*/
int main();